In Mongo DB, we see _id property as ObjectID("njsndjansd")

The reason for this is that the _id is a binary of 12 bytes length, and converting it to a string would mean doubling its data size (to 24 bytes)
(this can be checked by _id.id.toHexString().length)

That's why the id is enclosed as ObjectID function

Mongoose JS is an ODM (Object Document Mapper)

---

REST (REpresentational State Transfer) API
~~

We fetch data using HTTP requests.
They're of two types - GET and POST (sent with a JSON Request)

In both cases, we get a JSON response

Each API is defined by a HTTP method and a path (of the resource)
eg. CREATE API with a POST method to /tasks

READ API with a GET method to /tasks
READ API with a GET method to /tasks/:id (for specific task with the specified ID)

UPDATE API with a PATCH method to /tasks/:id

DELETE API with a DELETE method to /tasks/:id

-----

Static methods are accessible on the models
eg.
Definition = userSchema.statics.findByCredentials()
Call = User.findByCredentials

Other methods are accessible on the model instance
eg.
Definition = userSchema.methods.findByCredentials()
Call = user.findByCredentials

-----

bcrypt.js - tool for password encryption
Hash password using bcrypt.hash(passwordString, hashCount)
the hashCount can be set to 8

compare if a password matches with the hashed value using 
bcrypt.compare(passwordString, hashedPasswordString)

-----

JSON Web Token
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiJhYmMxMjM0NSIsImlhdCI6MTU4NTgzMjE4N30.DANRmyIrslQX4MGXpnyTvVwArs9fERFKdAC-y8hSWj8
three parts - 
1. Header/Metadata
2. Payload/Data
3. Signature (used in verification)

all 3 are separated by a dot(.)

we can verify the generated token with jwt.verify(jwtToken, secretString)

-----

Express Middleware

Add a header in request as follows(in postman): 
Key: Authorization
Value: Bearer <token>

get request header by: 
req.header('headerName')

-----

Postman Advanced
~~

Process to add a global URL, and authToken 

1. Add universal environment by clicking the gear icon, and adding an environment
2. Add url as a key with value equal to localhost (or prod url whenever available)
3. Edit your collection, go to Authorization tab, choose Bearer token, and set it equal to {{authToken}}
4. in login user service call, go to Tests tab, and add following script: 
(this executes after the service call is done)
if (pm.response.code === 200) {
    pm.environment.set('authToken', pm.response.json().token)
}

This will set the authToken defined earlier to the value retrieved on login
